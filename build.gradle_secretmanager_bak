plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.google.cloud.tools.appengine'
}

group = 'com.member'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudGcpVersion', "3.4.9")
}

dependencies {
	implementation 'com.auth0:java-jwt:4.2.1'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.google.cloud:spring-cloud-gcp-starter'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-secretmanager'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'org.apache.poi:poi:5.2.3'
	implementation 'org.apache.poi:poi-ooxml:5.2.3'
	implementation 'org.json:json:20220924'
	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.yaml:snakeyaml:1.29'
}

dependencyManagement {
	imports {
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

task build {
    dependsOn myTask
    // 기존의 build 태스크 설정
}

def retrieveSecretValueFromSecretManager(String secretUrl) {
    // Google Secret Manager로부터 값을 가져오는 로직 작성
    def keyFile = System.getenv('GOOGLE_APPLICATION_CREDENTIALS')
    def authCommand = "gcloud auth activate-service-account --key-file=$keyFile"
    def authProcess = authCommand.execute()
    authProcess.waitFor()

    def command = "gcloud secrets versions access latest --secret='$secretUrl'"
    def process = command.execute()
    def secretValue = process.text.trim()
    process.waitFor(10, TimeUnit.SECONDS)

    return secretValue
}
task myTask {
    doLast {
        def activeProfile = project.property('spring.profiles.active')
        def configFile = file("src/main/resources/application-${activeProfile}.yml")

        if (configFile.exists()) {
            def config = new Yaml().load(configFile.text)
            def secretUrl = config['my']['property'] // ${sm://jdbc-url} 값이 있는 경로

            // Google Secret Manager에서 실제 값 조회
            def secretValue = retrieveSecretValueFromSecretManager(secretUrl)
            println "Value from application-${activeProfile}.yml: $secretValue"
        } else {
            println "application-${activeProfile}.yml 파일이 존재하지 않습니다."
        }
    }
}

